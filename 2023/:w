import sys
import re
import u as u
from collections import defaultdict
import math
import itertools
import numpy as np

is_example = (len(sys.argv) > 1)
fn = 'inputs/' + __file__.replace('.py', '') + ('.example' if is_example else '') + '.data'
if is_example:
    print("===== RUNNING THE EXAMPLE =====")
with open(fn) as file:
    lines = [line.rstrip() for line in file]


# PART 1
instructions = []
for l in lines:
    inst, color = l.split(' (')
    color = color[0:-1]
    inst = inst.split(' ')
    inst[1] = int(inst[1])
    instructions.append((inst[0], inst[1], color))

dirs = {
    'U': (-1, 0),
    'D': (1, 0),
    'R': (0, 1),
    'L': (0, -1)
}

holes = set()
holes.add((0, 0))

i, j = 0, 0
mi, Mi, mj, Mj = 0, 0, 0, 0
for dir, v, _ in instructions:
    di, dj = dirs[dir]
    for _ in range(v):
        i, j = i+di, j+dj
        holes.add((i, j))
        mi, Mi, mj, Mj = min(mi, i), max(Mi, i), min(mj, j), max(Mj, j)

# u.print_set(holes, ' ')

# Works with nice inputs :)
i0, j0 = None, None
for j in range(mj, Mj+1):
    if (mi+1, j) in holes:
        i0, j0 = mi+1,j+1
        break

inner = set()
to_explore = set()
to_explore.add((i0, j0))

while len(to_explore) > 0:
    i, j = to_explore.pop()
    inner.add((i, j))

    for di, dj in u.ortho_neighbours:
        ni, nj = i+di, j+dj
        if (ni, nj) not in inner and (ni, nj) not in holes:
            to_explore.add((ni, nj))

res = len(holes) + len(inner)
print(res)


# PART 2
def signature(row):
    return 'Signature: ' + ' - '.join(map(str, row))

digit_to_dir = ['R', 'D', 'L', 'U']
rows = defaultdict(lambda: [])


print("===========================")

# TODO: check that up/down always followed by left/right and vice versa (but input is probably nice)

i, j = 0, 0
for _, _, v in instructions:
    dir = digit_to_dir[int(v[-1])]
    v = int(v[1:-1], 16)

    print(dir, v)

    if dir == 'R':
        rows[i].append((j, j+v))
        j += v

    elif dir == 'L':
        rows[i].append((j-v, j))
        j -= v

    elif dir == 'D':
        for __i in range(i+1, i+v):
            rows[__i].append(j)

        i += v

    elif dir == 'U':
        for __i in range(i-v+1, i):
            rows[__i].append(j)

        i -= v

    else:
        raise ValueError("Unexpected direction")

    print("Now at position:", i, j)


res = 0
for i in sorted(rows.keys()):
    row = rows[i]
    row.sort(key = lambda x: x if type(x) == int else x[0])

    inner_start = None
    idx = 0

    if i == 356353:
        print(row)

    while idx < len(row):
        if type(row[idx]) != int:
            if len(row) == 1:
                res += row[idx][1] - row[idx][0] + 1
                idx += 1
                continue

            if idx == 0:
                inner_start = row[idx][0]
                idx += 1
                continue

            if idx == len(row) - 1 and inner_start is not None:
                res += row[idx][1] - inner_start + 1
                idx += 1
                continue

            if inner_start is None:
                res += row[idx][1] - row[idx][0] + 1

            idx += 1
            continue

        if inner_start is None:
            inner_start = row[idx]
            idx += 1
        else:
            res += row[idx] - inner_start + 1
            inner_start = None
            idx += 1

print(res)
1/0


shape = []
current_row = None
current_i = None
for i in sorted(rows.keys()):  # Making sure scanning top to bottom
    row = rows[i]
    row.sort()

    if current_row is None:
        current_row = row
        current_i = i

    if signature(row) != signature(current_row):
        shape.append((current_row, i - current_i))
        current_row, current_i = row, i

shape.append((current_row, i - current_i))


for r, v in enumerate(shape):
    print('SHAPE', r, v)


print("================================================")

res = 0
for r, L in shape:
    if L == 1:
        continue

    res += L * (sum(v for i, v in enumerate(r) if i % 2 == 1) - sum(v for i, v in enumerate(r) if i % 2 == 0))

print(res)
print(res + outer)

good = 952408144115

print(good - res - outer)

print("================================================")

res = 0
current_signature = None

for i in sorted(rows.keys()):
    row = rows[i]


    s = signature(row)
    if s != current_signature:
        current_signature = s
        print(current_signature)


    if len(row) % 2 == 1:
        row = row[0:-1]

    res += sum(v for i, v in enumerate(row) if i % 2 == 1) - sum(v for i, v in enumerate(row) if i % 2 == 0)

print(res, res + outer)







